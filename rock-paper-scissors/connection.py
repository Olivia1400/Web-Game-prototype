import databricks.sql as sql  # Adjust import if needed

class dbConnectionHandle():
    def __init__(self, connectionDetails, server_hostname, http_path, access_token):
        self.connectionDetails = connectionDetails
        self.server_hostname = server_hostname
        self.http_path = http_path
        self.access_token = access_token
        self.userID = None  # Holds active user session ID

    def dbConnect(self):
        return sql.connect(
            server_hostname=self.server_hostname,
            http_path=self.http_path,
            access_token=self.access_token
        )

    def dbInitializeCheck(self):
        self.signupSystem("admin", "admin123")
        connect = self.dbConnect()
        cursor = connect.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS RPSResults (
                player1 CHAR(1) NOT NULL,
                player2 CHAR(1) NOT NULL,
                userID BIGINT NOT NULL REFERENCES UserAccounts(userID),
                currentTime TIMESTAMP
            );
        ''')
        connect.commit()
        connect.close()

    def insertGameResult(self, uc, mc, userID):
        connect = self.dbConnect()
        cursor = connect.cursor()
        sqlString = '''
            INSERT INTO RPSResults (player1, player2, userID, currentTime)
            VALUES (?, ?, ?, CURRENT_TIMESTAMP);
        '''
        cursor.execute(sqlString, (uc, mc, userID))
        connect.commit()
        connect.close()

    def readGameResults(self):
        connect = self.dbConnect()
        cursor = connect.cursor()
        cursor.execute('SELECT player1, player2 FROM RPSResults;')
        rows = cursor.fetchall()
        connect.commit()
        cursor.close()
        connect.close()
        col1 = [row[0] for row in rows]
        col2 = [row[1] for row in rows]
        return rows, col1, col2

    def signupSystemVerify(self, username, password):
        if not username or not password:
            return ("Username and password cannot be empty.")
        elif len(username) < 3 or len(password) < 6:
            return ("Username must be at least 3 characters and password at least 6 characters long.")
        elif not username.isalnum():
            return ("Username must be alphanumeric.")
        elif not any(char.isdigit() for char in password):
            return ("Password must contain at least one digit.")
        elif not any(char.isupper() for char in password):
            return ("Password must contain at least one uppercase letter.")
        else:
            return self.signupSystem(username, password)

    def signupSystem(self, signupUserName, signupUserPassword):
        connect = self.dbConnect()
        cursor = connect.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS UserAccounts (
                userID BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                username STRING NOT NULL,
                password STRING NOT NULL
            );
        ''')
        connect.commit()
        connect.close()
        return self.uploadSignupDetails(signupUserName, signupUserPassword)

    def uploadSignupDetails(self, signupUserName, signupUserPassword):
        signupUserName = signupUserName.strip().lower()
        signupUserPassword = signupUserPassword.strip()
        connect = self.dbConnect()
        cursor = connect.cursor()
        cursor.execute('''
            INSERT INTO UserAccounts (username, password)
            VALUES (?, ?);
        ''', (signupUserName, signupUserPassword))
        connect.commit()
        connect.close()
        return "Signup successful. You can now login with your credentials."

    def loginINIT(self, loginUserName, loginUserPassword):
        return self.loginSystemVerify(loginUserName, loginUserPassword)


    def loginSystemVerify(self, loginUserName, loginUserPassword):
        if not loginUserName or not loginUserPassword:
            return ("Username and password cannot be empty.")
        else:
            return self.loginSystemCheck(loginUserName, loginUserPassword)

    def loginSystemCheck(self, loginUserName, loginUserPassword):
        loginUserName = loginUserName.strip().lower()
        loginUserPassword = loginUserPassword.strip()
        connect = self.dbConnect()
        cursor = connect.cursor()
        cursor.execute('''
            SELECT userID FROM UserAccounts
            WHERE username = ? AND password = ?;
        ''', (loginUserName, loginUserPassword))
        row = cursor.fetchone()
        connect.commit()
        connect.close()
        if row:
            self.userID = row[0]  # âœ… Save userID inside the object
            return "login successful", row[0]
        else:
            return "login failed", None

    def leaderboardMainSystem(self):
        self.dbInitializeCheck()
        connect = self.dbConnect()
        cursor = connect.cursor()
        cursor.execute('''
            CREATE OR REPLACE VIEW winCount AS
            SELECT userID, COUNT(*) AS winCount
            FROM RPSResults
            WHERE (player1 = 'r' AND player2 = 's')
                OR (player1 = 's' AND player2 = 'p')
                OR (player1 = 'p' AND player2 = 'r')
            GROUP BY userID;
        ''')
        connect.commit()
        connect.close()

    def getLeaderboardTop10(self):
        self.leaderboardMainSystem()
        connect = self.dbConnect()
        cursor = connect.cursor()
        cursor.execute('''
            SELECT ua.username, wc.winCount
            FROM UserAccounts ua
            JOIN winCount wc ON ua.userID = wc.userID
            ORDER BY wc.winCount DESC
            LIMIT 10;
        ''')
        results = cursor.fetchall()
        connect.commit()
        connect.close()
        return results

    def userIDcheck(self, userID):
        if userID is None and self.userID is None:
            return ("User ID is not set. Please login or signup first.")
        return userID


