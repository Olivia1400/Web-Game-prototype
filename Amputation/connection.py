from databricks import sql


class dbConnectionHandle():
    def __init__(self, connectionDetails, server_hostname, http_path, access_token):
        self.connectionDetails = connectionDetails
        
        self.server_hostname = server_hostname
        self.http_path = http_path
        self.access_token = access_token
    
    def dbConnect(self):
        connectionDetails = open("databricksConnectionDetails.txt").read().splitlines()
        return sql.connect(
            connection = dbConnectionHandle(
                connectionDetails = connectionDetails,
                server_hostname = connectionDetails[0],
                http_path = connectionDetails[1],
                access_token = connectionDetails[2])
        )
    
    def dbInitializeCheck(self):
        dbConnectionHandle.signupSystem(self, "admin","admin123")
        connect = self.dbConnect()
        cursor = connect.cursor()
        cursor.execute('''CREATE TABLE IF NOT EXISTS RPSResults (
            player1 CHAR(1) NOT NULL,
            player2 CHAR(1) NOT NULL,
            userID BIGINT NOT NULL REFERENCES UserAccounts(userID),
            currentTime TIMESTAMP
        );''')
        connect.commit()
        connect.close()
    
    def insertGameResult(self, userChoice, machineChoice, userID):
        connect = self.dbConnect()
        cursor = connect.cursor()
        sqlString = ("""INSERT INTO RPSResults (player1, player2, userID, currentTime)"""\
            """VALUES (?, ?, ?, CURRENT_TIMESTAMP);""")
        cursor.execute(sqlString, (userChoice, machineChoice, userID ))
        
        connect.commit()
        connect.close()
        
    
    def readGameResults(self):
        connect = self.dbConnect()
        cursor = connect.cursor()
        sqlString = '''
            SELECT player1, player2 FROM RPSResults;
        '''
        cursor.execute(sqlString)
        rows = cursor.fetchall()
        col1 = [row[0] for row in rows]
        col2 = [row[1] for row in rows]
        cursor.close()
        connect.close()
        return rows, col1, col2
    
    def signupSystemVerify( username, password):
        if not username or not password:
            raise ValueError("Username and password cannot be empty.")
        
        elif len(username) < 3 or len(password) < 6:
            raise ValueError("Username must be at least 3 characters and password at least 6 characters long.")
        
        elif not username.isalnum():
            raise ValueError("Username must be alphanumeric.")
        
        elif not any(char.isdigit() for char in password):
            raise ValueError("Password must contain at least one digit.")
        
        elif not any(char.isupper() for char in password):
            raise ValueError("Password must contain at least one uppercase letter.")
        else:
            dbConnectionHandle.signupSystem()
    
    
    def signupSystem(self, signupUserName, signupUserPassword):
        connect = self.dbConnect()
        cursor = connect.cursor()
        sqlString = '''CREATE TABLE IF NOT EXISTS UserAccounts (
            userID BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
            username STRING NOT NULL,
            password STRING NOT NULL
        );'''
        cursor.execute(sqlString)
        connect.commit()
        connect.close()
        dbConnectionHandle.uploadSignupDetails(self, signupUserName, signupUserPassword)
    
    
    def uploadSignupDetails(self,signupUserName, signupUserPassword):
        signupUserName = signupUserName.strip().lower()
        signupUserPassword = signupUserPassword.strip()
        connect = self.dbConnect()
        cursor = connect.cursor()
        sqlString = '''
            INSERT INTO UserAccounts (username, password) VALUES (?, ?);
        '''
        cursor.execute(sqlString, (signupUserName, signupUserPassword))
        connect.commit()
        connect.close()
        return ("Signup successful. You can now login with your credentials.")
    
    def loginINIT(self, loginUserName, loginUserPassword):
        dbConnectionHandle.loginSystemVerify(self, loginUserName, loginUserPassword)
    
    def loginSystemVerify(self, loginUserName, loginUserPassword):
        if not loginUserName or not loginUserPassword:
            raise ValueError("Username and password cannot be empty.")
        else:
            dbConnectionHandle.loginSystemCheck(self, loginUserName, loginUserPassword)
    
    def loginSystemCheck(self, loginUserName, loginUserPassword):
        loginUserName = loginUserName.strip().lower()
        loginUserPassword = loginUserPassword.strip()
        connect = self.dbConnect()
        cursor = connect.cursor()
        sqlString = '''
            SELECT userID FROM UserAccounts WHERE username = ? AND password = ?;
        '''
        cursor.execute(sqlString, (loginUserName, loginUserPassword))
        global userID
        userID = cursor.fetchone()
        connect.close()
        return "login successful"
    
    
    def leaderboardMainSystem(self):
        self.dbInitializeCheck()
        connect = self.dbConnect()
        cursor = connect.cursor()
        sqlString = '''
            CREATE OR REPLACE VIEW winCount AS
            SELECT userID, COUNT(*) AS winCount
            FROM RPSResults
            WHERE (player1 = 'r' AND player2 = 's')
                OR (player1 = 's' AND player2 = 'p')
                OR (player1 = 'p' AND player2 = 'r')
            GROUP BY userID;
        '''
        cursor.execute(sqlString)
        connect.commit()
        connect.close()
    
    
    def getLeaderboardTop10(self):
        # Ensure the winCount view exists
        dbConnectionHandle.leaderboardMainSystem(self)
        connect = self.dbConnect()
        cursor = connect.cursor()
        sqlString =  '''
            SELECT ua.username, wc.winCount
            FROM UserAccounts ua
            JOIN winCount wc ON ua.userID = wc.userID
            ORDER BY wc.winCount DESC
            LIMIT 10;
        '''
        cursor.execute(sqlString)
        results = cursor.fetchall()
        connect.close()
        return results
    
    def userIDcheck(userID):
        if userID is None:
            return("User ID is not set. Please login or signup first.")
        return userID